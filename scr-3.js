// ! НА ЩО ЗВЕРТАТИ УВАГУ ПРИ ВИКОНАННІ ЗАВДАННЯ:
// * В рядку, де написано "ВАШ КОД" починаєте писати код. Можете додавати після нього стільки рядків, скільки треба для виконання задачі.
// *  Після рядка "КіНЕЦЬ БЛОКУ КОДА" починається наступна задача.
// * Якщо в кінці рядку написано "видалити цей рядок", то просто видаляєте рядок.
// * Якщо написано "змінити рядок" - змінюєте код в рядку на той, що треба по задачі.
// ? Для того, щоб побачити кольорові коментарі встановть в редактор коду доповнення better comments
// ? https://plugins.jetbrains.com/plugin/10850-better-comments
// ? https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments

// ! ###Оголошуємо змінні###

// * Змінна, яка зберігає кількість карток на дошці. Ініціалізувати із значенням 12.
// ? Це змінні, які ви повинні були зробити в минулому завданні.
// ? Можете замість цих вставити свої власні згідно опису
const CARDS_COUNT = 12;

// * Змінна, яка зберігає час затримки перед перевертанням картки. Ініціалізувати зі значенням 1000.
// ? Це змінні, які ви повинні були зробити в минулому завданні.
// ? Можете замість цих вставити свої власні згідно опису
const FLIP_CARD_DELAY = 1000;

// * Змінна, значення якої визначає чи маємо перевернуту картку. Ініціалізуємо зі значенням false.
// ? Це змінні, які ви повинні були зробити в минулому завданні.
// ? Можете замість цих вставити свої власні згідно опису
let hasFlippedCard = false;

// * Змінні, значення яких зберігатиму першу та другу перевернуту картку. Тільки оголошуємо, без ініціалізації.
// ? Це змінні, які ви повинні були зробити в минулому завданні.
// ? Можете замість цих вставити свої власні згідно опису
let firstCard, secondCard;

// * Змінна, яка зберігає всі об'єкти карток. Знаходимо на сторінці всі елементи з класами ".memory-card" і записуємо в змінну.
const ALL_CARDS_OBJECTS = document.querySelectorAll(".memory-card");

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// ! ###Пишемо функції ###

// * Функція, яка скидає значення змінних дошки. Змінною, значення якої визначає, чи маємо на дошці перевернуту картку, ставимо вихідне значення. Змінним значення яких зберігають першу і другу перевернуту карту присвоюємо порожнє значення.
// ? Це функція, яку ви повинні були зробити в минулому завданні.
// ? Можете замість нєї вставити свою власну згідно опису

function resetBoard() {
	hasFlippedCard = false;
	firstCard = secondCard = null;
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, яка через певний час перевертає картки у вихідний стан. Функція повинна через FLIP_CARD_DELAY виконати такі дії:
// * - змінним, які зберігають першу і другу натиснуту картку, через властивість classList, прибрати клас "flip" (виводи в консоль видаляємо)
// * - викликати функцію скидання змінних дошки
// ? Це функція, яку ви повинні були зробити в минулому завданні.
// ? Можете замість нєї вставити свою власну згідно опису та доробити згідно цього завдання

function unflipCards() {
	setTimeout(function () {
		firstCard.classList.remove("flip");
		secondCard.classList.remove("flip");
		resetBoard();
	}, FLIP_CARD_DELAY);
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, яка визначає чи збігаються перевернуті картки. Функція як параметри приймає назву фреймворку першої картки та назву фреймворку другої картки. При збігу назв фреймворків карток виконується блокування карт, при розбіжності - їх переворот у вихідний стан.
// * Замінити console.log("Дія 1") на виклик функції блокування карт
// * Замінити console.log("Дія 2") на виклик функції по перевороту карток у вихідний стан.
// ? Це функція, яку ви повинні були зробити в минулому завданні.
// ? Можете замість нєї вставити свою власну згідно опису та доробити згідно цього завдання

function actionIfMatch(firstCardFramework, secondCardframework) {
	if (firstCardFramework === secondCardframework) {
		disableCards();
	} else {
		unflipCards();
	}
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, яка буде обробником при натисканні на картку.
// * Як параметр функція приймає об'єкт події
// * Якщо значення в змінних, що зберігають першу та другу картку не пусті - зупиняємо роботу функції.
// * Якщо картка, на яку натиснули і значення записане в змінній, яка призначена для зберігання першої перевернутої картки збігаються - зупиняємо роботу функції.
// * Додаємо картці клас "flip"
// * Перевіряємо, якщо на дошці ще немає перевернутих карток, то:
// * - змінюємо значення змінної, яка визначає чи маємо ми перевернуту картку на true
// * - записуємо в змінну, яка призначена для зберігання першої перевернутої картки - картку на яку натиснули та зупиняємо роботу функції
// * Інакше записуємо картку на яку натиснули в змінну, яка призначена для зберігання другої перевернутої картки
// * Викликаємо функцію, яка визначає чи збігаються перевернуті картки і передаємо їй як аргументи значення фреймворку першої і другої картки. Підказку як отримати назву фреймворку може дати розмітка карток (Їх HTML код).
function cardClickHandler(eventObject) {
	const clickedCard = eventObject.target.parentNode;
	if (clickedCard === firstCard || firstCard && secondCard) {
		return;
	  }
	clickedCard.classList.add("flip");
	if (!hasFlippedCard) {
	  hasFlippedCard = true;
	  firstCard = clickedCard;
	} else {
	  secondCard = clickedCard;
	  actionIfMatch(firstCard.getAttribute("data-framework"), secondCard.getAttribute("data-framework"));
	}
  }
  

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, що ініціалізує дошку. Функція приймає як параметри масив карток. Перебирає отриманий масив і при кожній ітерації (колі перебору): привласнюємо їм випадкові значення, розраховані раніше, в css властивість `order`, вішаємо обробник події кліку на кожну картку.
// ? Це функція, яку ви повинні були зробити в минулому завданні.
// ? Можете замість нєї вставити свою власну згідно опису та доробити згідно цього завдання

function initializeBoard(cards) {
	cards.forEach(function (card) {
		const randomPos = Math.floor(Math.random() * CARDS_COUNT);
		card.style.order = randomPos;
		card.addEventListener("click", cardClickHandler);
		// ? ВАШ КОД
	});
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція блокування першої та другої картки. Функція має виконати такі дії:
// * - Видаляє обробники кліка на першу та другу картки
// * - Викликає функцію скидання змінних дошки.
// ? Це функція, яку ви повинні були зробити в минулому завданні.
// ? Можете замість нєї вставити свою власну згідно опису та доробити згідно цього завдання

function disableCards() {
	firstCard.removeEventListener("click", cardClickHandler);
	secondCard.removeEventListener("click", cardClickHandler);
  	resetBoard();
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Викликаємо функцію ініціалізації дошки, передаємо їй як аргумент змінну, яка зберігає всі об'єкти карток
// ? Це функція, яку ви повинні були викликати в минулому завданні.
// ? Можете замість нєї вставити свою власну згідно опису та доробити згідно цього завдання
initializeBoard(ALL_CARDS_OBJECTS);